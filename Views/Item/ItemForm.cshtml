@model Tool_Shop_Web_App.Models.ItemDM
@{ bool isEditMode = Model.Id != null && Model.Id != Guid.Empty;}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>ItemForm</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
</head>
<body>
    <div class="container mt-5">
        <form id="itemForm">
            @Html.HiddenFor(m => m.Id)
            @Html.HiddenFor(m => m.SerNo)
            <div class="form-group">
                <label for="Code">Code:</label>
                @Html.TextBoxFor(m => m.Code, new { @class = "form-control", required = "required" })
            </div>
            <div class="form-group">
                <label for="Name">Name:</label>
                @Html.TextBoxFor(m => m.Name, new { @class = "form-control", required = "required" })
            </div>
            <div class="form-group">
                <label for="Category">Category:</label>
                @Html.DropDownListFor(m => m.Category, new SelectList(Model.Categories, "Code", "Name"), new { @class = "form-control", required = "required" })
            </div>
            <div class="form-group">
                <label for="Price">Price:</label>
                @Html.TextBoxFor(m => m.Price, new { @class = "form-control", type = "number", required = "required" })
            </div>
            <div class="form-group">
                <label for="Description">Description:</label>
                @Html.TextAreaFor(m => m.Description, new { @class = "form-control" })
            </div>
            <div class="form-group">
                <label for="IsFreezed">Is Freezed:</label>
                @Html.CheckBoxFor(m => m.IsFreezed, new { @class = "form-check-input" })
            </div>
            <div class="form-group">
                <label for="Image">Image:</label>
                <input type="file" id="Image" name="Image" accept="image/*" class="form-control-file" />
            </div>
            <button type="button" name="ButtonType" onclick="SaveForm()" class="btn btn-primary"> @(isEditMode ? "Edit" : "Save")</button>
            <button type="button" name="Delete" id="DeleteItem" onclick="Delete()" class="btn btn-danger" @(isEditMode ? "" : "disabled")>Delete</button>
        </form>

    </div>

</body>
</html>

<script>
    function SaveForm() {
        event.preventDefault(); // Prevent the default form submission

        var formElement = document.getElementById('itemForm');
        var formData = new FormData(formElement); // Create FormData object from the form element

        var fileInput = document.getElementById('Image');
        var file = fileInput.files[0];

        if (file) {
            var reader = new FileReader();

            reader.onloadend = function () {
                var base64String = reader.result.replace("data:", "").replace(/^.+,/, "");

                var jsonData = {
                    Id: formData.get('Id'),
                    SerNo: formData.get('SerNo'),
                    Code: formData.get('Code'),
                    Name: formData.get('Name'),
                    Category: formData.get('Category'),
                    Price: formData.get('Price'),
                    Description: formData.get('Description'),
                    IsFreezed: formData.get('IsFreezed'), // Convert checkbox value to boolean
                    Image: base64String
                };

                sendFormData(jsonData);
            };

            reader.readAsDataURL(file);
        } else {
            var jsonData = {
                Id: formData.get('Id'),
                SerNo: formData.get('SerNo'),
                Code: formData.get('Code'),
                Name: formData.get('Name'),
                Category: formData.get('Category'),
                Price: formData.get('Price'),
                Description: formData.get('Description'),
                IsFreezed: formData.get('IsFreezed'), // Convert checkbox value to boolean
                Image: null
            };

            SubmitFormData(jsonData);
        }
    }

    function SubmitFormData(jsonData) {
        $.ajax({
            url: '/Item/SaveItem',
            type: 'POST',
            data: JSON.stringify(jsonData),
            contentType: 'application/json',
            success: function (response) {
                // Handle success response
                if (response && response.id) {
                    // Set the returned ID in the hidden field
                    $('#Id').val(response.id);
                    // Change the button type from Save to Edit
                    $('#ButtonType').text('Edit');
                    $('#DeleteItem').prop('disabled', false);
                    alert(response.message);
                }
                else if (response && response.message) {
                    alert(response.message);
                }
            },
            error: function (xhr, status, error) {
                // Handle error response
                alert('Error submitting form: ' + error);
            }
        });
    }

    function Delete() {
        var id = document.getElementById("Id").value;
        if (id && id !== '00000000-0000-0000-0000-000000000000') {
            $.ajax({
                url: '/Item/DeleteItem',
                type: 'POST',
                data: { Id: id },
                success: function (response) {
                    if (response.success) {
                        window.location.href = '/Item/Listing';
                    } else {
                        alert(response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert('An error occurred: ' + error);
                }
            });
        }
        else {
            alert("Need To Save Item before Deleteing");
        }
    }


</script>
